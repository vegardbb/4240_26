package com.snakeladders.model;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class ChanceField extends Field{

    private int id;

    /**
    Model class for the field that contains all the things that make up our implementation of Stigespillet

    Contents:

    All fields are generated by the GameScreenController Class. This class makes sure that you wo't be telwported ad infinitum.
    This class does nothing, aside from contributing to represent the state of the game.
     **/

    /**
    Legend:
    SWAP - Player Randomly switches places with another player. 
    DOUBLE - on the next turn the Player moves twice as long as the die number indicates
    BACKWARDS - on the next turn the Player moves in the opposite direction
    KEEPAWAY - On the next turn the Player avoids any possible board event, and will neither climb a ladder nor do a chance event should they land on such a field
    JUMP - the Player is promptly teleported up to six fields forward
    **/
    private enum Type {KEEPAWAY, BACKWARDS, DOUBLE, JUMP, SWAP} // Class within me
    
//    private Type fieldtype; // We will not need this field. Also, we may as well consider leaving the teleporterField out of the constructor too, because normalField does not need it.
    //private Field teleportToField; //Used by ladderFields and occasionally chancefields, normally null for Normalfield.
    private Board board; // Reference to the board the field belongs to.

    public ChanceField(Board board, int i, float x, float y, float size) {
        super(board, i, x, y, size);
        //this.fieldtype = randomChoice(); // Choose a type randomly.
    }
//    public Type getFieldType(){ return this.fieldtype; }

    // Fields for choosing a random ChanceField Type
    private static final List<Type> VALUES =
            Collections.unmodifiableList(Arrays.asList(Type.values()));
    private static final int SIZE = VALUES.size();
    private static final Random RANDOM = new Random();

    public Type randomChoice()  {
        return VALUES.get(RANDOM.nextInt(SIZE));
    } //private static


}